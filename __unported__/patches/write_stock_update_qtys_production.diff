=== modified file 'stock/stock.py'
--- stock/stock.py	2012-10-05 07:47:57 +0000
+++ stock/stock.py	2013-06-10 08:49:49 +0000
@@ -1695,17 +1695,17 @@
         'date_expected': lambda *a: time.strftime('%Y-%m-%d %H:%M:%S'),
     }
 
-    def write(self, cr, uid, ids, vals, context=None):
-        if isinstance(ids, (int, long)):
-            ids = [ids]
-        if uid != 1:
-            frozen_fields = set(['product_qty', 'product_uom', 'product_uos_qty', 'product_uos', 'location_id', 'location_dest_id', 'product_id'])
-            for move in self.browse(cr, uid, ids, context=context):
-                if move.state == 'done':
-                    if frozen_fields.intersection(vals):
-                        raise osv.except_osv(_('Operation forbidden'),
-                                             _('Quantities, UoMs, Products and Locations cannot be modified on stock moves that have already been processed (except by the Administrator)'))
-        return  super(stock_move, self).write(cr, uid, ids, vals, context=context)
+#    def write(self, cr, uid, ids, vals, context=None):
+#        if isinstance(ids, (int, long)):
+#            ids = [ids]
+#        if uid != 1:
+#            frozen_fields = set(['product_qty', 'product_uom', 'product_uos_qty', 'product_uos', 'location_id', 'location_dest_id', 'product_id'])
+#            for move in self.browse(cr, uid, ids, context=context):
+#                if move.state == 'done':
+#                    if frozen_fields.intersection(vals):
+#                        raise osv.except_osv(_('Operation forbidden'),
+#                                             _('Quantities, UoMs, Products and Locations cannot be modified on stock moves that have already been processed (except by the Administrator)'))
+#        return  super(stock_move, self).write(cr, uid, ids, vals, context=context)
 
     def copy(self, cr, uid, id, default=None, context=None):
         if default is None: